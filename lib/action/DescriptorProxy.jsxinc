#include "../utils/scopes.jsxinc"
#include "../extensions/Array.jsxinc"
#include "DescriptorProperty.jsxinc"

var DescriptorProxy = function (desc) {
    this.desc = desc;
};


DescriptorProxy.prototype.hasKey = function (key) { return this.desc.hasKey(stringIDToTypeID(key)); };

DescriptorProxy.prototype.getData = function (key) { return this.desc.getData(stringIDToTypeID(key)); };
DescriptorProxy.prototype.getBoolean = function (key) { return this.desc.getBoolean(stringIDToTypeID(key)); };
DescriptorProxy.prototype.getClass = function (key) { return this.desc.getClass(stringIDToTypeID(key)); };
DescriptorProxy.prototype.getDouble = function (key) { return this.desc.getDouble(stringIDToTypeID(key)); };
DescriptorProxy.prototype.getEnumerationType = function (key) { return this.desc.getEnumerationType(stringIDToTypeID(key)); };
DescriptorProxy.prototype.getEnumerationValue = function (key) { return this.desc.getEnumerationValue(stringIDToTypeID(key)); };
DescriptorProxy.prototype.getInteger = function (key) { return this.desc.getInteger(stringIDToTypeID(key)); };
DescriptorProxy.prototype.getList = function (key) { return this.desc.getList(stringIDToTypeID(key)); };
DescriptorProxy.prototype.getObjectType = function (key) { return this.desc.getObjectType(stringIDToTypeID(key)); };
DescriptorProxy.prototype.getObjectValue = function (key) { return this.desc.getObjectValue(stringIDToTypeID(key)); };
DescriptorProxy.prototype.getData = function (key) { return this.desc.getData(stringIDToTypeID(key)); };
DescriptorProxy.prototype.getReferene = function (key) { return this.desc.getReferene(stringIDToTypeID(key)); };
DescriptorProxy.prototype.getString = function (key) { return this.desc.getString(stringIDToTypeID(key)); };
DescriptorProxy.prototype.getUnitDoubleType = function (key) { return this.desc.getUnitDoubleType(stringIDToTypeID(key)); };
DescriptorProxy.prototype.getUnitDoubleValue = function (key) { return this.desc.getUnitDoubleValue(stringIDToTypeID(key)); };

DescriptorProxy.prototype.properties = function () {
    var props = {};
    for (var i = 0; i < this.desc.count; ++i) {
        var prop = this.property(i);

        var key = _utils.id2char(prop.keyIndex);
        key = key[0].toLowerCase() + key.substr(1);
        
        props[key] = prop;
    }
    return props;
};

DescriptorProxy.prototype.property = function (indexOrPath) {
    if (typeof indexOrPath == "number") {
        var i = indexOrPath;
        
        var keyIndex = this.desc.getKey(i);
        var type = this.desc.getType(keyIndex);
        return new DescriptorProperty(this.desc, keyIndex, type);
    }

    function getByKeyIndex (proxy, keyIndex) {
        for (var i = 0; i < proxy.desc.count; ++i) {
            if (proxy.desc.getKey(i) == keyIndex) {
                return proxy.property(i);
            }
        }
        return null;
    }

    var paths = indexOrPath.split('/');
    
    var keyIndex = stringIDToTypeID(paths[0]);
    var current = getByKeyIndex(this, keyIndex);

    for (var i = 1; i < paths.length; ++i) {
        if (current == null) {
            return null;
        }

        var key = paths[i];

        var value = current.get().value;
        if (value === undefined) {
            return null;
        }

        if (value instanceof ActionReference) {
            value = executeActionGet(value);
        }

        if (value instanceof ActionDescriptor) {
            var proxy = new DescriptorProxy(value);
            keyIndex = stringIDToTypeID(key);
            current = getByKeyIndex(proxy, keyIndex);
        } else if (value instanceof ActionList) {
            var index = parseInt(key);
            if (isNaN(index)) {
                return null;
            }
            var type = value.getType(index);
            current = new DescriptorProperty(value, index, type);
        } else {
            return null;
        }
    }

    return current;
};

DescriptorProxy.prototype.serialize = function (selector) {
    selector = selector == undefined ? selector = function (key, value) { return value; } : selector;

    var props = {};

    var stack = [];
    var tmpProps = this.properties();
    for (var key in tmpProps) {
        stack.push({"key": key, "value": tmpProps[key].get(), "parent": props});
    }

    while (stack.length > 0) {
        var item = stack.pop();

        var key = item.key;
        var parent = item.parent;

        var value = item.value;
        if (value.hasOwnProperty('value')) {
            value = value.value;
        }

        value = selector(key, value);
 
        if (value instanceof ActionReference) {
            value = executeActionGet(value);
        }

        if (value instanceof ActionDescriptor) {
            var desc = new DescriptorProxy(value);
            var childProps = desc.properties();

            var children = {};
            for (var childKey in childProps) {
                stack.push({"key": childKey, "value": childProps[childKey].get(), "parent": children});
            }
            parent[key] = children;
        } else if (value instanceof ActionList) {
            var children = [];
            for (var i = 0; i < value.count; ++i) {
                var type = value.getType(i);
                var child = new DescriptorProperty(value, i, type);
                stack.push({"key": i, "value": child.get(), "parent": children});
            }
            parent[key] = children;
        } else {
            parent[key] = value;
        }
    }

    return props;
};
